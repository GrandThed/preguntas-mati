{"version":3,"sources":["quotes/preguntas.js","App.js","serviceWorker.js","index.js"],"names":["question","category","awnser","hint","randomQuestion","dataList","prev","randomQuote","Math","floor","random","length","Quote","categories","data","reduce","acc","e","array","value","indexOf","useState","setHint","state","setState","handleChange","filter","useEffect","console","log","className","map","key","type","onChange","handleCheckbox","checked","disabled","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ddfc198a.chunk.js","sourcesContent":["export default [\r\n  {\r\n    question: \"¿Cual es la rama de la ciencia jasjsa\",\r\n    category: \"La materia mas linda\",\r\n    awnser: \"no tiene respuesta\",\r\n    hint: \"no la se\",\r\n  },\r\n  {\r\n    question: \"¿Cual es la rama de la ciencia jasjsa\",\r\n    category: \"La materia mas linda\",\r\n    awnser: \"no tiene respuesta\",\r\n    hint: \"no la se\",\r\n  },\r\n  {\r\n    question:\r\n      \"¿Cual es la rama de la ciencia jasjsa asdasdasdasda asdasdasdasd asd asd asd asa sdas as dasd asd asd as d sa dasd asd as dasd ¿Cual es la rama de la ciencia jasjsa asdasdasdasda asdasdasdasd asd asd asd asa sdas as dasd asd asd as d sa dasd asd as dasd ¿Cual es la rama de la ciencia jasjsa asdasdasdasda asdasdasdasd asd asd asd asa sdas as dasd asd asd as d sa dasd asd as dasd \",\r\n    category: \"La materia mas linda\",\r\n    awnser: \"no tiene respuesta\",\r\n    hint: \"no la se\",\r\n  },\r\n  {\r\n    question: \"¿Cual es la rama de la ciencia jasjsa\",\r\n    category: \"La materia mas linda\",\r\n    awnser: \"no tiene respuesta\",\r\n    hint: \"no la se\",\r\n  },\r\n  {\r\n    question: \"¿Cual es la rama de la ciencia jasjsa\",\r\n    category: \"Mama mia\",\r\n    awnser: \"no tiene respuesta\",\r\n    hint: \"no la se\",\r\n  },\r\n  {\r\n    question: \"¿Cual es la rama de la ciencia jasjsa\",\r\n    category: \"Hu\",\r\n    awnser: \"no tiene respuesta\",\r\n    hint: \"no la se\",\r\n  },\r\n  {\r\n    question: \"¿Cual es la rama de la ciencia jasjsa\",\r\n    category: \"No se\",\r\n    awnser: \"no tiene respuesta\",\r\n    hint: \"no la se\",\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport data from \"./quotes/preguntas\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Quote />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst randomQuestion = (dataList = [], prev) => {\r\n  const randomQuote = dataList[Math.floor(Math.random() * dataList.length)];\r\n  if (prev && randomQuote.question === prev.question)\r\n    return dataList[Math.floor(Math.random() * dataList.length)];\r\n  return randomQuote;\r\n};\r\n\r\nconst addUniqueValue = (array, value) => {\r\n  if (array.indexOf(value) === -1) return [...array, value];\r\n  return array;\r\n};\r\n\r\nconst Quote = () => {\r\n  const categories = data.reduce(\r\n    (acc, e) => addUniqueValue(acc, e.category),\r\n    []\r\n  );\r\n\r\n  const [hint, setHint] = useState(false);\r\n\r\n  const [state, setState] = useState({\r\n    question: randomQuestion(data),\r\n    ...categories.reduce((acc, e) => ({ ...acc, [e]: true }), {}),\r\n  });\r\n\r\n  const handleChange = () => {\r\n    setHint(false);\r\n    setState((prev) => ({\r\n      ...prev,\r\n      question: randomQuestion(\r\n        data.filter((e) => state[e.category]),\r\n        state.question\r\n      ),\r\n    }));\r\n  };\r\n  const HandleHint = () => {\r\n    setHint((prev) => !prev);\r\n  };\r\n\r\n  const handleCheckbox = (e) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      [e]: !prev[e],\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(state[state.question.category])\r\n    if (!state[state.question.category]){\r\n      handleChange()\r\n    }\r\n  }, [state])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"category__container\">\r\n        {categories.map((e) => {\r\n          return (\r\n            <label key={e}>\r\n              {e}\r\n              <input\r\n                className=\"category__input\"\r\n                type=\"checkbox\"\r\n                onChange={() => handleCheckbox(e)}\r\n                checked={state[e]}\r\n              />\r\n            </label>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"quote\">\r\n        {state.question ? (\r\n          <>\r\n            <h1 className=\"text\">Pregunta de: {state.question.category}</h1>\r\n            <h3 className=\"text\">{state.question.question}</h3>\r\n            {hint && <p>{state.question.hint}</p>}\r\n          </>\r\n        ) : (\r\n          <h1 className=\"text\">No hay preguntas u.u</h1>\r\n        )}\r\n        <div className=\"btns\">\r\n          <button\r\n            className=\"btn-next\"\r\n            disabled={data.filter((e) => state[e.category]).length < 2}\r\n            onClick={handleChange}\r\n          >\r\n            Siguiente\r\n          </button>\r\n          {state.question && state.question.hint && (\r\n            <button className=\"btn-next\" onClick={HandleHint}>\r\n              Pista\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}